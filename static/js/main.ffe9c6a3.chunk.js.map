{"version":3,"sources":["components/Contexts.js","components/enums.js","components/propTypes.js","hooks/useWindowSize.js","hooks/useAnimationFrame.js","components/ChartCanvas/ChartCanvas.js","components/Chart/Chart.js","components/Charts/Charts.js","components/ChartsPage.js","App.js","serviceWorker.js","index.js"],"names":["initChartsContext","loading","data","ChartsContext","React","createContext","GRAPH_TYPES","LINE","X","graphPropType","PropTypes","arrayOf","oneOfType","string","number","typesPropType","objectOf","oneOf","Object","toConsumableArray","values","arrayOfStringsPropTypes","shape","columns","isRequired","types","names","colors","useWindowSize","_useState","useState","height","window","innerHeight","width","innerWidth","_useState2","slicedToArray","size","setSize","getWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useAnimationFrame","callback","lines","frameRef","useRef","loop","current","requestAnimationFrame","useLayoutEffect","cancelAnimationFrame","ChartCanvas","_ref","canvasRef","windowSize","getContext","ctx","clearRect","fillStyle","fillRect","xStep","points","length","maxOfPoints","Math","max","apply","map","line","yRatio","forEach","_ref2","id","beginPath","strokeStyle","moveTo","lineLength","i","lineTo","stroke","console","error","react_default","a","createElement","ref","className","defaultProps","Chart","chart","axis","filter","column","min","range","setRange","arr","slice","components_ChartCanvas_ChartCanvas","js_default","draggableTrack","maxValue","minValue","value","onChange","Charts","chartCanvasNodes","useContext","index","components_Chart_Chart","key","Fragment","ChartsPage","context","chartsLoading","components_Charts_Charts","App","state","setState","fetchData","asyncToGenerator","regenerator_default","mark","_callee","response","chartData","wrap","_context","prev","next","objectSpread","fetch","sent","json","stop","this","arguments","Provider","components_ChartsPage","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffe9c6a3.chunk.js","sourcesContent":["import React from 'react';\n\nconst initChartsContext = {\n  loading: false,\n  data: [],\n};\n\nconst ChartsContext = React.createContext(initChartsContext);\n\nexport { ChartsContext, initChartsContext };\n","const GRAPH_TYPES = {\n  LINE: 'line',\n  X: 'x',\n};\n\nexport { GRAPH_TYPES as default, GRAPH_TYPES };\n","import PropTypes from 'prop-types';\nimport { GRAPH_TYPES } from './enums';\n\nconst graphPropType = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n);\n\nconst typesPropType = PropTypes.objectOf(\n  PropTypes.oneOf([...Object.values(GRAPH_TYPES)]),\n);\n\nconst arrayOfStringsPropTypes = PropTypes.objectOf(PropTypes.string);\n\nconst graphDataPropType = PropTypes.shape({\n  columns: PropTypes.arrayOf(graphPropType).isRequired,\n  types: typesPropType.isRequired,\n  names: arrayOfStringsPropTypes.isRequired,\n  colors: arrayOfStringsPropTypes.isRequired,\n});\n\nexport { graphDataPropType as default, graphDataPropType };\n","import { useEffect, useState } from 'react';\n\nfunction useWindowSize() {\n  const [size, setSize] = useState({\n    height: window.innerHeight,\n    width: window.innerWidth,\n  });\n\n  const getWindowSize = () => ({\n    height: window.innerHeight,\n    width: window.innerWidth,\n  });\n\n  useEffect(() => {\n    const handleResize = () => setSize(getWindowSize);\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  return size;\n}\n\nexport default useWindowSize;\n","import { useRef, useLayoutEffect } from 'react';\n\nconst useAnimationFrame = (callback, lines) => {\n  const frameRef = useRef();\n\n  const loop = () => {\n    frameRef.current = window.requestAnimationFrame(loop);\n    callback();\n  };\n\n  useLayoutEffect(() => {\n    frameRef.current = window.requestAnimationFrame(loop);\n\n    return () => window.cancelAnimationFrame(frameRef.current);\n  }, [lines]);\n};\n\nexport default useAnimationFrame;\n","/* eslint-disable react/prop-types */\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n// import { graphDataPropType } from '../propTypes';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useAnimationFrame from '../../hooks/useAnimationFrame';\n\nimport './ChartCanvas.scss';\n\nconst ChartCanvas = ({ lines, colors, height }) => {\n  const canvasRef = useRef(null);\n  const windowSize = useWindowSize();\n\n  const draw = () => {\n    if (canvasRef.current && canvasRef.current.getContext) {\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      ctx.fillStyle = '#6a6e72';\n      ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n      const xStep = canvasRef.current.width / lines[0].points.length;\n      const maxOfPoints = Math.max.apply(\n        null,\n        lines.map(line => Math.max.apply(null, line.points)),\n      );\n      const yRatio = height / maxOfPoints;\n\n      lines.forEach(({ id, points }) => {\n        // console.log('points', points);\n        ctx.beginPath();\n        ctx.strokeStyle = colors[id];\n        ctx.moveTo(0, height - points[1] * yRatio);\n\n        const lineLength = points.length;\n        for (let i = 2; i < lineLength; i += 1) {\n          ctx.lineTo(xStep * i, height - points[i] * yRatio);\n        }\n\n        ctx.stroke();\n      });\n    } else {\n      console.error('Canvas not supported: ', canvasRef);\n    }\n  };\n\n  useAnimationFrame(draw, lines);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"Canvas\"\n      height={height}\n      width={windowSize.width}\n    />\n  );\n};\n\nChartCanvas.propTypes = {\n  // chart: graphDataPropType.isRequired,\n  height: PropTypes.number,\n};\n\nChartCanvas.defaultProps = {\n  height: 300,\n};\n\nexport default ChartCanvas;\n","import React, { useState } from 'react';\nimport InputRange from 'react-input-range';\nimport { GRAPH_TYPES } from '../enums';\nimport { graphDataPropType } from '../propTypes';\n\nimport ChartCanvas from '../ChartCanvas/ChartCanvas';\n\nimport 'react-input-range/lib/css/index.css';\nimport './Chart.scss';\n\nconst HEIGHT = 450;\n\nconst Chart = ({ chart }) => {\n  const {\n    columns, types, names, colors,\n  } = chart;\n\n  const axis = columns.filter(column => types[column[0]] === GRAPH_TYPES.X)[0];\n\n  const [range, setRange] = useState({ min: 0, max: axis.length - 1 });\n\n  const lines = columns\n    .filter(column => types[column[0]] === GRAPH_TYPES.LINE)\n    .map(arr => ({\n      id: arr[0],\n      points: arr.slice(range.min + 1, range.max),\n    }));\n\n  return (\n    <div className=\"Chart\">\n      <ChartCanvas\n        lines={lines}\n        axis={{\n          id: axis[0],\n          points: axis.slice(1),\n        }}\n        names={names}\n        colors={colors}\n        height={HEIGHT}\n      />\n      <InputRange\n        draggableTrack\n        maxValue={axis.length - 1}\n        minValue={0}\n        value={range}\n        onChange={(value) => {\n          setRange(value);\n        }}\n      />\n    </div>\n  );\n};\n\nChart.propTypes = {\n  chart: graphDataPropType.isRequired,\n};\n\nexport default Chart;\n","/* eslint-disable react/no-array-index-key */\nimport React, { useContext } from 'react';\nimport { ChartsContext } from '../Contexts';\nimport Chart from '../Chart/Chart';\n\nconst Charts = () => {\n  const context = useContext(ChartsContext);\n  const { data } = context;\n\n  const chartCanvasNodes = data.map((chart, index) => (\n    <div>\n      <Chart key={index} chart={chart} />\n    </div>\n  ));\n\n  return <React.Fragment>{chartCanvasNodes}</React.Fragment>;\n};\n\nexport default Charts;\n","import React, { useContext } from 'react';\nimport { ChartsContext } from './Contexts';\nimport Charts from './Charts/Charts';\n\nconst ChartsPage = () => {\n  const context = useContext(ChartsContext);\n\n  const { loading, data } = context;\n  const chartsLoading = loading || !data.length;\n\n  return (\n    <div className=\"App\">\n      {chartsLoading && <div>Loading ...</div>}\n\n      {!chartsLoading && <Charts />}\n    </div>\n  );\n};\n\nexport default ChartsPage;\n","import React, { useEffect, useState } from 'react';\nimport { ChartsContext, initChartsContext } from './components/Contexts';\nimport ChartsPage from './components/ChartsPage';\n\nimport './App.scss';\n\nconst App = () => {\n  const [state, setState] = useState(initChartsContext);\n\n  const fetchData = async () => {\n    setState({ ...state, loading: true });\n\n    const response = await fetch('/telegram-coding-contest-charts/chart_data.json');\n    const chartData = await response.json();\n\n    setState({\n      ...state,\n      loading: false,\n      data: chartData,\n    });\n  };\n\n  useEffect(() => {\n    try {\n      fetchData();\n    } catch (error) {\n      console.error('Something goes wrong; API problems? ', error);\n    }\n  }, []);\n\n  return (\n    <ChartsContext.Provider value={state}>\n      <ChartsPage />\n    </ChartsContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}